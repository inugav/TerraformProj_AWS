def planpfx = 'AppInfrastp'
def planname
def strkey_name = credentials('key_name')
def strpvt_key_path = credentials('32c3e09e-0fa5-4263-bd77-0026b9aed9b5') 

pipeline {
    agent any
    tools {
        "org.jenkinsci.plugins.terraform.TerraformInstallation" "terraform"
    }
    parameters {
             choice(name: 'WORKSPACE', choices: ['DEV', 'UAT', 'PRD'] , description:'workspace environment')
    }

    environment {
        TF_HOME = tool('terraform')
        TF_INPUT = "0"
        TF_IN_AUTOMATION = "TRUE"
        TF_LOG = ""
        AWS_ACCESS_KEY_ID = credentials('aws_access_key')
        AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
        PATH = "$TF_HOME:$PATH"
    }

    stages {
        stage('AppInfraInit'){
            steps {
                dir('AppInfraSetup/') {
                    script {
                        try {
                            bat 'terraform --version'
                            bat "terraform init"            
                        }
                        catch (err) {
                            echo "Initialization Errors "
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
        }
        stage('AppInfraValidate'){
            steps {
                dir('AppInfraSetup/'){
                    script {
                        try {
                            bat 'terraform validate'
                        }
                        catch (err) {
                            echo "Validation Errors "
                            currentBuild.result = 'UNSTABLE'
                            return
                        }
                    }
                }
            }
        }
        stage('AppInfraPlan'){
            steps {
                dir('AppInfraSetup/'){
                    script {
                        planname = "${planpfx}" + "_"+ "${params.WORKSPACE}"+ ".tfplan"
                        try {
                            bat "terraform workspace select ${params.WORKSPACE}"
                        } catch (err) {
                             bat "terraform workspace new ${params.WORKSPACE}"
                        }
                        bat "terraform plan -out ${planname} -var 'key_name=${strkey_name}' -var 'private_key_path=${strpvt_key_path}'" 
                        stash name: "terraform-appinfra-plan", includes: "${planname}"
                    }
                }
            }
        }
        stage('AppInfraApply'){
            steps {
                script{
                    def apply = false
                    try {
                        input message: 'confirm apply', ok: 'Apply Config'
                        apply = true
                    } catch (err) {
                        apply = false
                        echo "Exiting without apply"
                    }
                    if(apply){
                        dir('AppInfraSetup/'){
                            unstash "terraform-appinfra-plan"
                            bat "terraform apply ${planname}"
                        }
                    }
                }
            }
        }
    }
}