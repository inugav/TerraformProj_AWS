def srvrgrp 
def playbook

pipeline {
    agent any

    parameters {
            choice(name: 'WORKSPACE', choices: ['DEV', 'UAT', 'PRD'] , description:'workspace environment')
            choice(name: 'SERVERTYPE', choices: ['websrvr', 'dbsrvr','natsrvr'], description: 'server group to perform action on')
    }

    environment {
        AWS_ACCESS_KEY_ID = credentials('aws_access_key')
        AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
        ANSIBLE_HOST_KEY_CHECKING = false
    }
    
    stages {
        stage('Generate Inventory File '){
            steps {
                dir('Ansible_Pipeline/') {
                    script {
                        try {
                            bat  '@C:\\Users\\vamsi\\AppData\\Local\\Programs\\Python\\Python38-32\\python.exe .\\QueryAWS_EC2.py'  
                        }
                        catch (err) {
                            echo "Error Generating File"
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
        }
    

        stage('Check Playbook Syntax'){
            steps {
                withCredentials([file(credentialsId: 'AWS_SSH_KEY_FILE', variable: 'ANSIBLE_PRIVATE_KEY_FILE')]) {
                    dir('Ansible_Pipeline/'){
                        script {
                            srvrgrp = "${params.SERVERTYPE}_${params.WORKSPACE}"
                            playbook = "${params.SERVERTYPE}.yml"
                            echo "Running ansible playbook against ${srvrgrp}"
                            try {
                                bat "@copy ${ANSIBLE_PRIVATE_KEY_FILE} ansible_tmp.pem"
                                bat '@C:\\Windows\\system32\\wsl.exe chmod 600 ansible_tmp.pem'     
                                bat """C:\\Windows\\system32\\wsl.exe -e ansible --version"""  
                                bat """C:\\Windows\\system32\\wsl.exe -e ansible-playbook -i hostsfile.ini \"${playbook}\" --limit \"${srvrgrp}\" --private-key=ansible_tmp.pem  --syntax-check """                               
                            }
                            catch (err) {
                                echo "Syntax Errors in Ansible Playbook"
                                currentBuild.result = 'UNSTABLE'
                            }
                            finally{
                                bat "@DEL ansible_tmp.pem"
                            }
                            echo "Syntax checks correct"
                        }
                    }
                }
            }
        }

        stage('Execute Ansible Playbook'){
            steps {
                withCredentials([file(credentialsId: 'AWS_SSH_KEY_FILE', variable: 'ANSIBLE_PRIVATE_KEY_FILE')]) {
                    dir('Ansible_Pipeline/'){
                        script {
                            def srvrgrp 
                            def playbook
                            srvrgrp = "${params.SERVERTYPE}_${params.WORKSPACE}"
                            playbook = "${params.SERVERTYPE}.yml"
                            echo "Running ansible playbook against ${srvrgrp}"
                            try {
                                bat "@copy ${ANSIBLE_PRIVATE_KEY_FILE} ansible_tmp.pem"
                                bat '@C:\\Windows\\system32\\wsl.exe -e chmod 600 ansible_tmp.pem'
                                   
                                bat """C:\\Windows\\system32\\wsl.exe -e ansible-playbook \"${playbook}\" -i hostsfile.ini --limit \"${srvrgrp}\" --private-key=ansible_tmp.pem """
                                bat "@DEL ansible_tmp.pem"
                            }
                            catch (err) {
                                echo "Error executing Ansible Playbook"  
                                currentBuild.result = 'UNSTABLE'
                                return
                            }
                            finally {
                                bat "@DEL ansible_tmp.pem"
                            }
                        }
                    }
                }
            }
        }
    }
}