def WSL_EXE = 'C:\\Windows\\system32\\wsl.exe'
def PYTHON_EXE = 'C:\\Users\\vamsi\\AppData\\Local\\Programs\\Python\\Python38-32\\python.exe'

pipeline {
    agent any

    parameters {
            choice(name: 'WORKSPACE', choices: ['DEV', 'UAT', 'PRD'] , description:'workspace environment')
            choice(name: 'SERVERTYPE', choices: ['websrvr', 'dbsrvr','natsrvr'], description: 'server group to perform action on')
    }

    environment {
        AWS_ACCESS_KEY_ID = credentials('aws_access_key')
        AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
        ANSIBLE_HOST_KEY_CHECKING = false
    }
    
    stages {
      
        stage('Generate Inventory File '){
            steps {
                dir('Ansible_Pipeline/') {
                    script {
                        try {
                            bat  'C:\\Users\\vamsi\\AppData\\Local\\Programs\\Python\\Python38-32\\python.exe .\\QueryAWS_EC2.py'  
                        }
                        catch (err) {
                            echo "Error Generating File"
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
        }
    
        stage('Execute Ansible Playbook'){
            steps {
                withCredentials([file(credentialsId: 'AWS_SSH_KEY_FILE', variable: 'ANSIBLE_PRIVATE_KEY_FILE')]) {
                    dir('Ansible_Pipeline/'){
                        script {
                                def srvrgrp 
                                srvrgrp = "${params.SERVERTYPE}_${params.WORKSPACE}"
                                echo "Running ansible playbook against ${srvrgrp}"
                                try {
                                    bat """C:\\Windows\\system32\\wsl.exe ansible \"${srvrgrp}\" -i hostsfile.ini -m ping --private-key=\"${env.ANSIBLE_PRIVATE_KEY_FILE}\" """
                                }
                                catch (err) {
                                    echo "Validation Errors "
                                    currentBuild.result = 'UNSTABLE'
                                    return
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}