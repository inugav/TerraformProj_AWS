pipeline {
    agent any

    parameters {
            choice(name: 'WORKSPACE', choices: ['DEV', 'UAT', 'PRD'] , description:'workspace environment')
            choice(name: 'SERVERTYPE', choices: ['websrvr', 'dbsrvr','natsrvr'], description: 'server group to perform action on')
    }

    environment {
        AWS_ACCESS_KEY_ID = credentials('aws_access_key')
        AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
        ANSIBLE_PRIVATE_KEY_FILE = credentials('AWS_SSH_KEY_FILE')
        PYTHON_EXE = 'C:\\Users\\vamsi\\AppData\\Local\\Programs\\Python\\Python38-32\\python.exe'
        WSL_EXE = 'C:\\Windows\\system32\\wsl.exe'
    }
    
    stages {
        def srvrgrp = "${env.SERVERTYPE}_${env.WORKSPACE}"
        stage('Generate Inventory File '){
            steps {
                dir('Ansible_Pipeline/') {
                    script {
                        try {
                            bat  '${env.PYTHON_EXE} .\\QueryAWS_EC2.py'  
                        }
                        catch (err) {
                            echo "Error Generating File"
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
        }
    
        stage('Execute Ansible Playbook'){
            steps {
                dir('Ansible_Pipeline/'){
                    script {
                        try {
                            bat '${env.WSL_EXE} ansible ${env.srvrgrp} -i hostsfile.ini -m ping '
                        }
                        catch (err) {
                            echo "Validation Errors "
                            currentBuild.result = 'UNSTABLE'
                            return
                        }
                    }
                }
            }
        }
    }
}